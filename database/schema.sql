-- =============================================================================
-- Online Shop Management System
-- Database Schema
--
-- Author: [Thoyyibhans]
-- Date: 2025-07-04
--
-- This script creates the full database schema including tables, constraints,
-- indexes, and initial sample data for the Oracle APEX Online Shop.
-- =============================================================================

-- Drop existing objects to ensure a clean slate (optional, for development)
BEGIN
   FOR c IN (SELECT table_name FROM user_tables) LOOP
      EXECUTE IMMEDIATE 'DROP TABLE ' || c.table_name || ' CASCADE CONSTRAINTS';
   END LOOP;
END;
/

-- =============================================================================
-- Table: USERS
-- Description: Stores user account information, including roles.
-- =============================================================================
CREATE TABLE users (
    user_id         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    username        VARCHAR2(50) NOT NULL,
    email           VARCHAR2(100) NOT NULL,
    password_hash   VARCHAR2(255) NOT NULL, -- In a real app, hash the password!
    role            VARCHAR2(20) DEFAULT 'CUSTOMER' NOT NULL,
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_users PRIMARY KEY (user_id),
    CONSTRAINT uk_users_email UNIQUE (email),
    CONSTRAINT chk_user_role CHECK (role IN ('ADMIN', 'CUSTOMER'))
);

COMMENT ON TABLE users IS 'Stores user accounts and their roles (Admin, Customer).';
COMMENT ON COLUMN users.password_hash IS 'Stores the hashed password for security.';


-- =============================================================================
-- Table: CATEGORIES
-- Description: Stores product categories.
-- =============================================================================
CREATE TABLE categories (
    category_id     NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    name            VARCHAR2(100) NOT NULL,
    description     VARCHAR2(500),
    CONSTRAINT pk_categories PRIMARY KEY (category_id),
    CONSTRAINT uk_categories_name UNIQUE (name)
);

COMMENT ON TABLE categories IS 'Stores product categories like Electronics, Books, etc.';


-- =============================================================================
-- Table: BRANDS
-- Description: Stores product brands.
-- =============================================================================
CREATE TABLE brands (
    brand_id        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    name            VARCHAR2(100) NOT NULL,
    CONSTRAINT pk_brands PRIMARY KEY (brand_id),
    CONSTRAINT uk_brands_name UNIQUE (name)
);

COMMENT ON TABLE brands IS 'Stores product brands like Apple, Samsung, etc.';


-- =============================================================================
-- Table: PRODUCTS
-- Description: Stores product information and inventory.
-- =============================================================================
CREATE TABLE products (
    product_id      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    name            VARCHAR2(255) NOT NULL,
    description     CLOB,
    price           NUMBER(10, 2) NOT NULL,
    stock_quantity  NUMBER(10) DEFAULT 0 NOT NULL,
    category_id     NUMBER,
    brand_id        NUMBER,
    image_url       VARCHAR2(500),
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_products PRIMARY KEY (product_id),
    CONSTRAINT fk_products_category FOREIGN KEY (category_id) REFERENCES categories(category_id),
    CONSTRAINT fk_products_brand FOREIGN KEY (brand_id) REFERENCES brands(brand_id),
    CONSTRAINT chk_product_price CHECK (price >= 0),
    CONSTRAINT chk_product_stock CHECK (stock_quantity >= 0)
);

CREATE INDEX idx_products_name ON products(name);
COMMENT ON TABLE products IS 'Central table for all products available in the shop.';


-- =============================================================================
-- Table: ORDERS
-- Description: Stores customer order information.
-- =============================================================================
CREATE TABLE orders (
    order_id        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    user_id         NUMBER NOT NULL,
    order_date      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount    NUMBER(12, 2) NOT NULL,
    status          VARCHAR2(20) DEFAULT 'PENDING' NOT NULL, -- PENDING, SHIPPED, DELIVERED, CANCELED
    shipping_address VARCHAR2(500) NOT NULL,
    CONSTRAINT pk_orders PRIMARY KEY (order_id),
    CONSTRAINT fk_orders_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT chk_order_status CHECK (status IN ('PENDING', 'SHIPPED', 'DELIVERED', 'CANCELED'))
);

COMMENT ON TABLE orders IS 'Header information for each customer order.';


-- =============================================================================
-- Table: ORDER_ITEMS
-- Description: Stores individual items within an order.
-- =============================================================================
CREATE TABLE order_items (
    order_item_id   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    order_id        NUMBER NOT NULL,
    product_id      NUMBER NOT NULL,
    quantity        NUMBER(5) NOT NULL,
    unit_price      NUMBER(10, 2) NOT NULL, -- Price at the time of purchase
    CONSTRAINT pk_order_items PRIMARY KEY (order_item_id),
    CONSTRAINT fk_order_items_order FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    CONSTRAINT fk_order_items_product FOREIGN KEY (product_id) REFERENCES products(product_id),
    CONSTRAINT chk_order_item_qty CHECK (quantity > 0)
);

COMMENT ON TABLE order_items IS 'Stores the line items for each order, linking products to orders.';


-- =============================================================================
-- Table: CART_ITEMS
-- Description: Stores items in a user's shopping cart.
-- =============================================================================
CREATE TABLE cart_items (
    cart_item_id    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    user_id         NUMBER NOT NULL,
    product_id      NUMBER NOT NULL,
    quantity        NUMBER(5) DEFAULT 1 NOT NULL,
    added_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pk_cart_items PRIMARY KEY (cart_item_id),
    CONSTRAINT fk_cart_items_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_cart_items_product FOREIGN KEY (product_id) REFERENCES products(product_id),
    CONSTRAINT uk_cart_user_product UNIQUE (user_id, product_id)
);

COMMENT ON TABLE cart_items IS 'Temporary storage for products in a user''s shopping cart.';


-- =============================================================================
-- Table: PAYMENTS
-- Description: Records payment transactions for orders.
-- =============================================================================
CREATE TABLE payments (
    payment_id      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    order_id        NUMBER NOT NULL,
    payment_date    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    amount          NUMBER(12, 2) NOT NULL,
    payment_method  VARCHAR2(50), -- e.g., 'Credit Card', 'PayPal'
    transaction_id  VARCHAR2(255),
    CONSTRAINT pk_payments PRIMARY KEY (payment_id),
    CONSTRAINT fk_payments_order FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

COMMENT ON TABLE payments IS 'Logs payment details associated with an order.';


-- =============================================================================
-- Sample Data Insertion
-- =============================================================================

-- 1. Users (Admin and Customers)
INSERT INTO users (username, email, password_hash, role) VALUES ('admin', 'admin@shop.com', 'hashed_password_placeholder', 'ADMIN');
INSERT INTO users (username, email, password_hash, role) VALUES ('johndoe', 'john.doe@example.com', 'hashed_password_placeholder', 'CUSTOMER');
INSERT INTO users (username, email, password_hash, role) VALUES ('janesmith', 'jane.smith@example.com', 'hashed_password_placeholder', 'CUSTOMER');

-- 2. Categories
INSERT INTO categories (name, description) VALUES ('Electronics', 'Gadgets and electronic devices');
INSERT INTO categories (name, description) VALUES ('Books', 'Fiction, non-fiction, and educational books');

-- 3. Brands
INSERT INTO brands (name) VALUES ('Apple');
INSERT INTO brands (name) VALUES ('Samsung');
INSERT INTO brands (name) VALUES ('Penguin Books');

-- 4. Products
INSERT INTO products (name, description, price, stock_quantity, category_id, brand_id, image_url)
VALUES ('Laptop Pro 15"', 'A powerful laptop for professionals.', 1999.99, 50, 1, 1, 'path/to/laptop.png');

INSERT INTO products (name, description, price, stock_quantity, category_id, brand_id, image_url)
VALUES ('Smartphone X', 'The latest smartphone with a stunning camera.', 999.50, 120, 1, 2, 'path/to/phone.png');

INSERT INTO products (name, description, price, stock_quantity, category_id, brand_id, image_url)
VALUES ('The Great Gatsby', 'A classic novel by F. Scott Fitzgerald.', 15.75, 200, 2, 3, 'path/to/book.png');

INSERT INTO products (name, description, price, stock_quantity, category_id, brand_id, image_url)
VALUES ('Wireless Mouse', 'Ergonomic wireless mouse.', 49.99, 150, 1, 2, 'path/to/mouse.png');

INSERT INTO products (name, description, price, stock_quantity, category_id, brand_id, image_url)
VALUES ('APEX for Developers', 'A guide to building amazing apps with Oracle APEX.', 55.00, 80, 2, 3, 'path/to/apex_book.png');


-- 5. A sample Order
-- Note: This requires the user_id for 'johndoe' which is 2.
INSERT INTO orders (user_id, total_amount, status, shipping_address)
VALUES (2, 1049.49, 'SHIPPED', '123 Main St, Anytown, USA');

-- 6. Order Items for the sample order
-- Note: Order_id is 1 (the one we just created).
INSERT INTO order_items (order_id, product_id, quantity, unit_price)
VALUES (1, 2, 1, 999.50); -- 1 Smartphone X

INSERT INTO order_items (order_id, product_id, quantity, unit_price)
VALUES (1, 4, 1, 49.99); -- 1 Wireless Mouse

-- 7. Payment for the sample order
INSERT INTO payments (order_id, amount, payment_method, transaction_id)
VALUES (1, 1049.49, 'Credit Card', 'txn_123456789ABC');


COMMIT;

/

SPOOL OFF;
